/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace geometry_msgs
{
    public sealed class InertiaStamp : LCM.LCM.LCMEncodable
    {
        public double m;
        public geometry_msgs.Vector3 com;
        public double ixx;
        public double ixy;
        public double ixz;
        public double iyy;
        public double iyz;
        public double izz;
 
        public InertiaStamp()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0xbeaa1a2a4c70b2e0L;
 
        static InertiaStamp()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("geometry_msgs.InertiaStamp"))
                return 0L;
 
            classes.Add("geometry_msgs.InertiaStamp");
            ulong hash = LCM_FINGERPRINT_BASE
                 + geometry_msgs.Vector3._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.m); 
 
            this.com._encodeRecursive(outs); 
 
            outs.Write(this.ixx); 
 
            outs.Write(this.ixy); 
 
            outs.Write(this.ixz); 
 
            outs.Write(this.iyy); 
 
            outs.Write(this.iyz); 
 
            outs.Write(this.izz); 
 
        }
 
        public InertiaStamp(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public InertiaStamp(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static geometry_msgs.InertiaStamp _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            geometry_msgs.InertiaStamp o = new geometry_msgs.InertiaStamp();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.m = ins.ReadDouble();
 
            this.com = geometry_msgs.Vector3._decodeRecursiveFactory(ins);
 
            this.ixx = ins.ReadDouble();
 
            this.ixy = ins.ReadDouble();
 
            this.ixz = ins.ReadDouble();
 
            this.iyy = ins.ReadDouble();
 
            this.iyz = ins.ReadDouble();
 
            this.izz = ins.ReadDouble();
 
        }
 
        public geometry_msgs.InertiaStamp Copy()
        {
            geometry_msgs.InertiaStamp outobj = new geometry_msgs.InertiaStamp();
            outobj.m = this.m;
 
            outobj.com = this.com.Copy();
 
            outobj.ixx = this.ixx;
 
            outobj.ixy = this.ixy;
 
            outobj.ixz = this.ixz;
 
            outobj.iyy = this.iyy;
 
            outobj.iyz = this.iyz;
 
            outobj.izz = this.izz;
 
            return outobj;
        }
    }
}

