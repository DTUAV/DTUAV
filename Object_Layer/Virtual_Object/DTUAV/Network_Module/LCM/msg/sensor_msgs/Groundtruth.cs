/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace sensor_msgs
{
    public sealed class Groundtruth : LCM.LCM.LCMEncodable
    {
        public double time_usec;
        public double latitude_rad;
        public double longitude_rad;
        public double altitude;
        public double velocity_east;
        public double velocity_north;
        public double velocity_up;
        public double attitude_q_w;
        public double attitude_q_x;
        public double attitude_q_y;
        public double attitude_q_z;
 
        public Groundtruth()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x941f04ae23e74a79L;
 
        static Groundtruth()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("sensor_msgs.Groundtruth"))
                return 0L;
 
            classes.Add("sensor_msgs.Groundtruth");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.time_usec); 
 
            outs.Write(this.latitude_rad); 
 
            outs.Write(this.longitude_rad); 
 
            outs.Write(this.altitude); 
 
            outs.Write(this.velocity_east); 
 
            outs.Write(this.velocity_north); 
 
            outs.Write(this.velocity_up); 
 
            outs.Write(this.attitude_q_w); 
 
            outs.Write(this.attitude_q_x); 
 
            outs.Write(this.attitude_q_y); 
 
            outs.Write(this.attitude_q_z); 
 
        }
 
        public Groundtruth(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public Groundtruth(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static sensor_msgs.Groundtruth _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            sensor_msgs.Groundtruth o = new sensor_msgs.Groundtruth();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.time_usec = ins.ReadDouble();
 
            this.latitude_rad = ins.ReadDouble();
 
            this.longitude_rad = ins.ReadDouble();
 
            this.altitude = ins.ReadDouble();
 
            this.velocity_east = ins.ReadDouble();
 
            this.velocity_north = ins.ReadDouble();
 
            this.velocity_up = ins.ReadDouble();
 
            this.attitude_q_w = ins.ReadDouble();
 
            this.attitude_q_x = ins.ReadDouble();
 
            this.attitude_q_y = ins.ReadDouble();
 
            this.attitude_q_z = ins.ReadDouble();
 
        }
 
        public sensor_msgs.Groundtruth Copy()
        {
            sensor_msgs.Groundtruth outobj = new sensor_msgs.Groundtruth();
            outobj.time_usec = this.time_usec;
 
            outobj.latitude_rad = this.latitude_rad;
 
            outobj.longitude_rad = this.longitude_rad;
 
            outobj.altitude = this.altitude;
 
            outobj.velocity_east = this.velocity_east;
 
            outobj.velocity_north = this.velocity_north;
 
            outobj.velocity_up = this.velocity_up;
 
            outobj.attitude_q_w = this.attitude_q_w;
 
            outobj.attitude_q_x = this.attitude_q_x;
 
            outobj.attitude_q_y = this.attitude_q_y;
 
            outobj.attitude_q_z = this.attitude_q_z;
 
            return outobj;
        }
    }
}

