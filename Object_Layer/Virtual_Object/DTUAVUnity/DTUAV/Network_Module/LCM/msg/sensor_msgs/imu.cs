/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace sensor_msgs
{
    public sealed class imu : LCM.LCM.LCMEncodable
    {
        public double timestamp_us;
        public double orientation_x;
        public double orientation_y;
        public double orientation_z;
        public double orientation_w;
        public double[] orientation_covariance;
        public double angular_velocity_x;
        public double angular_velocity_y;
        public double angular_velocity_z;
        public double[] angular_velocity_covariance;
        public double linear_acceleration_x;
        public double linear_acceleration_y;
        public double linear_acceleration_z;
        public double[] linear_acceleration_covariance;
 
        public imu()
        {
            orientation_covariance = new double[9];
            angular_velocity_covariance = new double[9];
            linear_acceleration_covariance = new double[9];
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0xb0c65ffc95562b67L;
 
        static imu()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("sensor_msgs.imu"))
                return 0L;
 
            classes.Add("sensor_msgs.imu");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.timestamp_us); 
 
            outs.Write(this.orientation_x); 
 
            outs.Write(this.orientation_y); 
 
            outs.Write(this.orientation_z); 
 
            outs.Write(this.orientation_w); 
 
            for (int a = 0; a < 9; a++) {
                outs.Write(this.orientation_covariance[a]); 
            }
 
            outs.Write(this.angular_velocity_x); 
 
            outs.Write(this.angular_velocity_y); 
 
            outs.Write(this.angular_velocity_z); 
 
            for (int a = 0; a < 9; a++) {
                outs.Write(this.angular_velocity_covariance[a]); 
            }
 
            outs.Write(this.linear_acceleration_x); 
 
            outs.Write(this.linear_acceleration_y); 
 
            outs.Write(this.linear_acceleration_z); 
 
            for (int a = 0; a < 9; a++) {
                outs.Write(this.linear_acceleration_covariance[a]); 
            }
 
        }
 
        public imu(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public imu(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static sensor_msgs.imu _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            sensor_msgs.imu o = new sensor_msgs.imu();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.timestamp_us = ins.ReadDouble();
 
            this.orientation_x = ins.ReadDouble();
 
            this.orientation_y = ins.ReadDouble();
 
            this.orientation_z = ins.ReadDouble();
 
            this.orientation_w = ins.ReadDouble();
 
            this.orientation_covariance = new double[(int) 9];
            for (int a = 0; a < 9; a++) {
                this.orientation_covariance[a] = ins.ReadDouble();
            }
 
            this.angular_velocity_x = ins.ReadDouble();
 
            this.angular_velocity_y = ins.ReadDouble();
 
            this.angular_velocity_z = ins.ReadDouble();
 
            this.angular_velocity_covariance = new double[(int) 9];
            for (int a = 0; a < 9; a++) {
                this.angular_velocity_covariance[a] = ins.ReadDouble();
            }
 
            this.linear_acceleration_x = ins.ReadDouble();
 
            this.linear_acceleration_y = ins.ReadDouble();
 
            this.linear_acceleration_z = ins.ReadDouble();
 
            this.linear_acceleration_covariance = new double[(int) 9];
            for (int a = 0; a < 9; a++) {
                this.linear_acceleration_covariance[a] = ins.ReadDouble();
            }
 
        }
 
        public sensor_msgs.imu Copy()
        {
            sensor_msgs.imu outobj = new sensor_msgs.imu();
            outobj.timestamp_us = this.timestamp_us;
 
            outobj.orientation_x = this.orientation_x;
 
            outobj.orientation_y = this.orientation_y;
 
            outobj.orientation_z = this.orientation_z;
 
            outobj.orientation_w = this.orientation_w;
 
            outobj.orientation_covariance = new double[(int) 9];
            for (int a = 0; a < 9; a++) {
                outobj.orientation_covariance[a] = this.orientation_covariance[a];
            }
 
            outobj.angular_velocity_x = this.angular_velocity_x;
 
            outobj.angular_velocity_y = this.angular_velocity_y;
 
            outobj.angular_velocity_z = this.angular_velocity_z;
 
            outobj.angular_velocity_covariance = new double[(int) 9];
            for (int a = 0; a < 9; a++) {
                outobj.angular_velocity_covariance[a] = this.angular_velocity_covariance[a];
            }
 
            outobj.linear_acceleration_x = this.linear_acceleration_x;
 
            outobj.linear_acceleration_y = this.linear_acceleration_y;
 
            outobj.linear_acceleration_z = this.linear_acceleration_z;
 
            outobj.linear_acceleration_covariance = new double[(int) 9];
            for (int a = 0; a < 9; a++) {
                outobj.linear_acceleration_covariance[a] = this.linear_acceleration_covariance[a];
            }
 
            return outobj;
        }
    }
}

