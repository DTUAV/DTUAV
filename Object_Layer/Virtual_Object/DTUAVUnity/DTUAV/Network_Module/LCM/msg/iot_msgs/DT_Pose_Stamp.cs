/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace iot_msgs
{
    public sealed class DT_Pose_Stamp : LCM.LCM.LCMEncodable
    {
        public double timestamp;
        public float position_x;
        public float position_y;
        public float position_z;
        public float orientation_x;
        public float orientation_y;
        public float orientation_z;
        public float orientation_w;
 
        public DT_Pose_Stamp()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x3b5697e0e029a1e2L;
 
        static DT_Pose_Stamp()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("iot_msgs.DT_Pose_Stamp"))
                return 0L;
 
            classes.Add("iot_msgs.DT_Pose_Stamp");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.timestamp); 
 
            outs.Write(this.position_x); 
 
            outs.Write(this.position_y); 
 
            outs.Write(this.position_z); 
 
            outs.Write(this.orientation_x); 
 
            outs.Write(this.orientation_y); 
 
            outs.Write(this.orientation_z); 
 
            outs.Write(this.orientation_w); 
 
        }
 
        public DT_Pose_Stamp(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public DT_Pose_Stamp(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static iot_msgs.DT_Pose_Stamp _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            iot_msgs.DT_Pose_Stamp o = new iot_msgs.DT_Pose_Stamp();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.timestamp = ins.ReadDouble();
 
            this.position_x = ins.ReadSingle();
 
            this.position_y = ins.ReadSingle();
 
            this.position_z = ins.ReadSingle();
 
            this.orientation_x = ins.ReadSingle();
 
            this.orientation_y = ins.ReadSingle();
 
            this.orientation_z = ins.ReadSingle();
 
            this.orientation_w = ins.ReadSingle();
 
        }
 
        public iot_msgs.DT_Pose_Stamp Copy()
        {
            iot_msgs.DT_Pose_Stamp outobj = new iot_msgs.DT_Pose_Stamp();
            outobj.timestamp = this.timestamp;
 
            outobj.position_x = this.position_x;
 
            outobj.position_y = this.position_y;
 
            outobj.position_z = this.position_z;
 
            outobj.orientation_x = this.orientation_x;
 
            outobj.orientation_y = this.orientation_y;
 
            outobj.orientation_z = this.orientation_z;
 
            outobj.orientation_w = this.orientation_w;
 
            return outobj;
        }
    }
}

