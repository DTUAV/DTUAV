/*
© Guangdong University of Technology,
© The Laboratory of Intelligent Decision and Cooperative Control,
© 2021-2022,
© Author: Yuanlin Yang (yongwang0808@163.com)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
<http://www.apache.org/licenses/LICENSE-2.0>.
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace DTUAV.UAV_Module.droneV2
{
    public class DroneV2Motor : MonoBehaviour
    {
        [Header("The motor provides upward force")]
        public float UpForce = 0.0f;

        [Header("The sliding force generated by motor torque")]
        public float SideForce = 0.0f;

        [Header("The distribution contribution of force ")]
        public float Power_Auto = 5f;
        public float Power_Man = 0.5f;

        [Header("The direction of motor rotation")]
        public bool InvertDirection;

        [Header("The influence factor on attitude angle")]
        public float YawFactor_Auto = 0.0f;
        public float PitchFactor_Auto = 0.0f;
        public float RollFactor_Auto = 0.0f;

        public float YawFactor_Man = 0.0f;
        public float PitchFactor_Man = 0.0f;
        public float RollFactor_Man = 0.0f;



        [Header("The rotation speed of motor")]
        public float SpeedPropeller = 0;

        [Header("Propeller")]
        public GameObject Propeller;

        [Header("Motor")]
        public GameObject motor;

        public DroneV2ControlMode inputControl;

        public DroneV2YawControl yaw_control;

        public DroneV2BaseControl BaseControl;
        public void UpdateForce()
        {
            float UpForceTotal;
            if (inputControl.ControlModel == true)
            {
                UpForceTotal = Mathf.Clamp(inputControl.ThrottleValueTo, 0, 1) * Power_Auto;
                UpForceTotal -= BaseControl.PitchCorrectionTo * PitchFactor_Auto;
                UpForceTotal -= BaseControl.RollCorrectionTo * RollFactor_Auto;
            }
            else
            {
                UpForceTotal = Mathf.Clamp(inputControl.ThrottleValueTo, 0, 1) * Power_Man;
                UpForceTotal -= BaseControl.PitchCorrectionTo * PitchFactor_Man;
                UpForceTotal -= BaseControl.RollCorrectionTo * RollFactor_Man;


            }


            UpForce = UpForceTotal;
            if (inputControl.ControlModel == true)
            {
                SideForce = PreNormalize(yaw_control.yawCorrection, YawFactor_Auto);
            }
            else
            {
                SideForce = PreNormalize(inputControl.YawToUav, YawFactor_Man);
            }

            SpeedPropeller = Mathf.Lerp(SpeedPropeller, UpForce * 1550000.0f, UnityEngine.Time.deltaTime);
            UpdatePropeller(SpeedPropeller);
        }

        public void UpdatePropeller(float speed)
        {
            Propeller.transform.Rotate(0.0f, SpeedPropeller * 2 * UnityEngine.Time.deltaTime, 0.0f);
        }


        float PreNormalize(float input, float factor)
        {
            float finalValue = input;

            if (InvertDirection)
                finalValue = Mathf.Clamp(finalValue, -1, 0);
            else
                finalValue = Mathf.Clamp(finalValue, 0, 1);

            if (inputControl.ControlModel == true)
            {
                return finalValue * (YawFactor_Auto);
            }
            else
            {
                return finalValue * (YawFactor_Man);
            }

        }
    }
}
